// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"FinanceTracker/auth/internal/domain"
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockOTPRepo creates a new instance of MockOTPRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOTPRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOTPRepo {
	mock := &MockOTPRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOTPRepo is an autogenerated mock type for the OTPRepo type
type MockOTPRepo struct {
	mock.Mock
}

type MockOTPRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOTPRepo) EXPECT() *MockOTPRepo_Expecter {
	return &MockOTPRepo_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockOTPRepo
func (_mock *MockOTPRepo) Generate(ctx context.Context, email string, duration time.Duration) (domain.OTP, error) {
	ret := _mock.Called(ctx, email, duration)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 domain.OTP
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) (domain.OTP, error)); ok {
		return returnFunc(ctx, email, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) domain.OTP); ok {
		r0 = returnFunc(ctx, email, duration)
	} else {
		r0 = ret.Get(0).(domain.OTP)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, email, duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOTPRepo_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockOTPRepo_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - duration time.Duration
func (_e *MockOTPRepo_Expecter) Generate(ctx interface{}, email interface{}, duration interface{}) *MockOTPRepo_Generate_Call {
	return &MockOTPRepo_Generate_Call{Call: _e.mock.On("Generate", ctx, email, duration)}
}

func (_c *MockOTPRepo_Generate_Call) Run(run func(ctx context.Context, email string, duration time.Duration)) *MockOTPRepo_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOTPRepo_Generate_Call) Return(oTP domain.OTP, err error) *MockOTPRepo_Generate_Call {
	_c.Call.Return(oTP, err)
	return _c
}

func (_c *MockOTPRepo_Generate_Call) RunAndReturn(run func(ctx context.Context, email string, duration time.Duration) (domain.OTP, error)) *MockOTPRepo_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// MarkUsed provides a mock function for the type MockOTPRepo
func (_mock *MockOTPRepo) MarkUsed(ctx context.Context, email string, code string) error {
	ret := _mock.Called(ctx, email, code)

	if len(ret) == 0 {
		panic("no return value specified for MarkUsed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, email, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOTPRepo_MarkUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkUsed'
type MockOTPRepo_MarkUsed_Call struct {
	*mock.Call
}

// MarkUsed is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - code string
func (_e *MockOTPRepo_Expecter) MarkUsed(ctx interface{}, email interface{}, code interface{}) *MockOTPRepo_MarkUsed_Call {
	return &MockOTPRepo_MarkUsed_Call{Call: _e.mock.On("MarkUsed", ctx, email, code)}
}

func (_c *MockOTPRepo_MarkUsed_Call) Run(run func(ctx context.Context, email string, code string)) *MockOTPRepo_MarkUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOTPRepo_MarkUsed_Call) Return(err error) *MockOTPRepo_MarkUsed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOTPRepo_MarkUsed_Call) RunAndReturn(run func(ctx context.Context, email string, code string) error) *MockOTPRepo_MarkUsed_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function for the type MockOTPRepo
func (_mock *MockOTPRepo) Verify(ctx context.Context, email string, code string) (bool, error) {
	ret := _mock.Called(ctx, email, code)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, email, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, email, code)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOTPRepo_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockOTPRepo_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - code string
func (_e *MockOTPRepo_Expecter) Verify(ctx interface{}, email interface{}, code interface{}) *MockOTPRepo_Verify_Call {
	return &MockOTPRepo_Verify_Call{Call: _e.mock.On("Verify", ctx, email, code)}
}

func (_c *MockOTPRepo_Verify_Call) Run(run func(ctx context.Context, email string, code string)) *MockOTPRepo_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOTPRepo_Verify_Call) Return(b bool, err error) *MockOTPRepo_Verify_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockOTPRepo_Verify_Call) RunAndReturn(run func(ctx context.Context, email string, code string) (bool, error)) *MockOTPRepo_Verify_Call {
	_c.Call.Return(run)
	return _c
}
