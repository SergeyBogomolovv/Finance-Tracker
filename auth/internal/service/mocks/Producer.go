// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"FinanceTracker/auth/pkg/events"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProducer creates a new instance of MockProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducer {
	mock := &MockProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProducer is an autogenerated mock type for the Producer type
type MockProducer struct {
	mock.Mock
}

type MockProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducer) EXPECT() *MockProducer_Expecter {
	return &MockProducer_Expecter{mock: &_m.Mock}
}

// PublishOTPGenerated provides a mock function for the type MockProducer
func (_mock *MockProducer) PublishOTPGenerated(ctx context.Context, event events.EventOTPGenerated) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishOTPGenerated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, events.EventOTPGenerated) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_PublishOTPGenerated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOTPGenerated'
type MockProducer_PublishOTPGenerated_Call struct {
	*mock.Call
}

// PublishOTPGenerated is a helper method to define mock.On call
//   - ctx context.Context
//   - event events.EventOTPGenerated
func (_e *MockProducer_Expecter) PublishOTPGenerated(ctx interface{}, event interface{}) *MockProducer_PublishOTPGenerated_Call {
	return &MockProducer_PublishOTPGenerated_Call{Call: _e.mock.On("PublishOTPGenerated", ctx, event)}
}

func (_c *MockProducer_PublishOTPGenerated_Call) Run(run func(ctx context.Context, event events.EventOTPGenerated)) *MockProducer_PublishOTPGenerated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.EventOTPGenerated
		if args[1] != nil {
			arg1 = args[1].(events.EventOTPGenerated)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProducer_PublishOTPGenerated_Call) Return(err error) *MockProducer_PublishOTPGenerated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_PublishOTPGenerated_Call) RunAndReturn(run func(ctx context.Context, event events.EventOTPGenerated) error) *MockProducer_PublishOTPGenerated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserRegistered provides a mock function for the type MockProducer
func (_mock *MockProducer) PublishUserRegistered(ctx context.Context, event events.EventUserRegistered) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserRegistered")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, events.EventUserRegistered) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProducer_PublishUserRegistered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserRegistered'
type MockProducer_PublishUserRegistered_Call struct {
	*mock.Call
}

// PublishUserRegistered is a helper method to define mock.On call
//   - ctx context.Context
//   - event events.EventUserRegistered
func (_e *MockProducer_Expecter) PublishUserRegistered(ctx interface{}, event interface{}) *MockProducer_PublishUserRegistered_Call {
	return &MockProducer_PublishUserRegistered_Call{Call: _e.mock.On("PublishUserRegistered", ctx, event)}
}

func (_c *MockProducer_PublishUserRegistered_Call) Run(run func(ctx context.Context, event events.EventUserRegistered)) *MockProducer_PublishUserRegistered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 events.EventUserRegistered
		if args[1] != nil {
			arg1 = args[1].(events.EventUserRegistered)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProducer_PublishUserRegistered_Call) Return(err error) *MockProducer_PublishUserRegistered_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProducer_PublishUserRegistered_Call) RunAndReturn(run func(ctx context.Context, event events.EventUserRegistered) error) *MockProducer_PublishUserRegistered_Call {
	_c.Call.Return(run)
	return _c
}
