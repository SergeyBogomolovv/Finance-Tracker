// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"FinanceTracker/auth/internal/domain"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) Create(ctx context.Context, email string, provider string) (domain.User, error) {
	ret := _mock.Called(ctx, email, provider)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (domain.User, error)); ok {
		return returnFunc(ctx, email, provider)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) domain.User); ok {
		r0 = returnFunc(ctx, email, provider)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, provider)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - provider string
func (_e *MockUserRepo_Expecter) Create(ctx interface{}, email interface{}, provider interface{}) *MockUserRepo_Create_Call {
	return &MockUserRepo_Create_Call{Call: _e.mock.On("Create", ctx, email, provider)}
}

func (_c *MockUserRepo_Create_Call) Run(run func(ctx context.Context, email string, provider string)) *MockUserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserRepo_Create_Call) Return(user domain.User, err error) *MockUserRepo_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepo_Create_Call) RunAndReturn(run func(ctx context.Context, email string, provider string) (domain.User, error)) *MockUserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepo_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepo_GetByEmail_Call {
	return &MockUserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepo_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) Return(user domain.User, err error) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepo_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (domain.User, error)) *MockUserRepo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}
