// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"FinanceTracker/profile/internal/domain"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// GetProfileByID provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) GetProfileByID(ctx context.Context, userID int) (domain.Profile, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileByID")
	}

	var r0 domain.Profile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (domain.Profile, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) domain.Profile); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Profile)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepo_GetProfileByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileByID'
type MockUserRepo_GetProfileByID_Call struct {
	*mock.Call
}

// GetProfileByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockUserRepo_Expecter) GetProfileByID(ctx interface{}, userID interface{}) *MockUserRepo_GetProfileByID_Call {
	return &MockUserRepo_GetProfileByID_Call{Call: _e.mock.On("GetProfileByID", ctx, userID)}
}

func (_c *MockUserRepo_GetProfileByID_Call) Run(run func(ctx context.Context, userID int)) *MockUserRepo_GetProfileByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepo_GetProfileByID_Call) Return(profile domain.Profile, err error) *MockUserRepo_GetProfileByID_Call {
	_c.Call.Return(profile, err)
	return _c
}

func (_c *MockUserRepo_GetProfileByID_Call) RunAndReturn(run func(ctx context.Context, userID int) (domain.Profile, error)) *MockUserRepo_GetProfileByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUserRepo
func (_mock *MockUserRepo) Update(ctx context.Context, user domain.Profile) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Profile) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.Profile
func (_e *MockUserRepo_Expecter) Update(ctx interface{}, user interface{}) *MockUserRepo_Update_Call {
	return &MockUserRepo_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserRepo_Update_Call) Run(run func(ctx context.Context, user domain.Profile)) *MockUserRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Profile
		if args[1] != nil {
			arg1 = args[1].(domain.Profile)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepo_Update_Call) Return(err error) *MockUserRepo_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepo_Update_Call) RunAndReturn(run func(ctx context.Context, user domain.Profile) error) *MockUserRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}
