// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"FinanceTracker/profile/internal/domain"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAvatarRepo creates a new instance of MockAvatarRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAvatarRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAvatarRepo {
	mock := &MockAvatarRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAvatarRepo is an autogenerated mock type for the AvatarRepo type
type MockAvatarRepo struct {
	mock.Mock
}

type MockAvatarRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAvatarRepo) EXPECT() *MockAvatarRepo_Expecter {
	return &MockAvatarRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAvatarRepo
func (_mock *MockAvatarRepo) Create(userID int, data io.Reader) (domain.Avatar, error) {
	ret := _mock.Called(userID, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Avatar
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, io.Reader) (domain.Avatar, error)); ok {
		return returnFunc(userID, data)
	}
	if returnFunc, ok := ret.Get(0).(func(int, io.Reader) domain.Avatar); ok {
		r0 = returnFunc(userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Avatar)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, io.Reader) error); ok {
		r1 = returnFunc(userID, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAvatarRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAvatarRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userID int
//   - data io.Reader
func (_e *MockAvatarRepo_Expecter) Create(userID interface{}, data interface{}) *MockAvatarRepo_Create_Call {
	return &MockAvatarRepo_Create_Call{Call: _e.mock.On("Create", userID, data)}
}

func (_c *MockAvatarRepo_Create_Call) Run(run func(userID int, data io.Reader)) *MockAvatarRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAvatarRepo_Create_Call) Return(avatar domain.Avatar, err error) *MockAvatarRepo_Create_Call {
	_c.Call.Return(avatar, err)
	return _c
}

func (_c *MockAvatarRepo_Create_Call) RunAndReturn(run func(userID int, data io.Reader) (domain.Avatar, error)) *MockAvatarRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}
