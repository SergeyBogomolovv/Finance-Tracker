// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAvatarRepo creates a new instance of MockAvatarRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAvatarRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAvatarRepo {
	mock := &MockAvatarRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAvatarRepo is an autogenerated mock type for the AvatarRepo type
type MockAvatarRepo struct {
	mock.Mock
}

type MockAvatarRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAvatarRepo) EXPECT() *MockAvatarRepo_Expecter {
	return &MockAvatarRepo_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function for the type MockAvatarRepo
func (_mock *MockAvatarRepo) Upload(ctx context.Context, key string, data io.Reader) error {
	ret := _mock.Called(ctx, key, data)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = returnFunc(ctx, key, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAvatarRepo_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockAvatarRepo_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - data io.Reader
func (_e *MockAvatarRepo_Expecter) Upload(ctx interface{}, key interface{}, data interface{}) *MockAvatarRepo_Upload_Call {
	return &MockAvatarRepo_Upload_Call{Call: _e.mock.On("Upload", ctx, key, data)}
}

func (_c *MockAvatarRepo_Upload_Call) Run(run func(ctx context.Context, key string, data io.Reader)) *MockAvatarRepo_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 io.Reader
		if args[2] != nil {
			arg2 = args[2].(io.Reader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAvatarRepo_Upload_Call) Return(err error) *MockAvatarRepo_Upload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAvatarRepo_Upload_Call) RunAndReturn(run func(ctx context.Context, key string, data io.Reader) error) *MockAvatarRepo_Upload_Call {
	_c.Call.Return(run)
	return _c
}
