// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAvatar creates a new instance of MockAvatar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAvatar(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAvatar {
	mock := &MockAvatar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAvatar is an autogenerated mock type for the Avatar type
type MockAvatar struct {
	mock.Mock
}

type MockAvatar_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAvatar) EXPECT() *MockAvatar_Expecter {
	return &MockAvatar_Expecter{mock: &_m.Mock}
}

// AvatarID provides a mock function for the type MockAvatar
func (_mock *MockAvatar) AvatarID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AvatarID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockAvatar_AvatarID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvatarID'
type MockAvatar_AvatarID_Call struct {
	*mock.Call
}

// AvatarID is a helper method to define mock.On call
func (_e *MockAvatar_Expecter) AvatarID() *MockAvatar_AvatarID_Call {
	return &MockAvatar_AvatarID_Call{Call: _e.mock.On("AvatarID")}
}

func (_c *MockAvatar_AvatarID_Call) Run(run func()) *MockAvatar_AvatarID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAvatar_AvatarID_Call) Return(s string) *MockAvatar_AvatarID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockAvatar_AvatarID_Call) RunAndReturn(run func() string) *MockAvatar_AvatarID_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockAvatar
func (_mock *MockAvatar) Upload(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAvatar_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockAvatar_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAvatar_Expecter) Upload(ctx interface{}) *MockAvatar_Upload_Call {
	return &MockAvatar_Upload_Call{Call: _e.mock.On("Upload", ctx)}
}

func (_c *MockAvatar_Upload_Call) Run(run func(ctx context.Context)) *MockAvatar_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAvatar_Upload_Call) Return(err error) *MockAvatar_Upload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAvatar_Upload_Call) RunAndReturn(run func(ctx context.Context) error) *MockAvatar_Upload_Call {
	_c.Call.Return(run)
	return _c
}
